openapi: 3.0.3
info:
  title: 書籍管理API
  description: 書籍を管理するAPI
  version: 1.0.0
  contact:
    name: Ryoichi Hayashi
servers:
  - url: 'http://localhost:8080'
paths:
  /authors:
    post:
      description: 著者登録
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAuthorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAuthorRequest'
      operationId: createAuthor
      tags:
        - author
      summary: 著者登録
    patch:
      summary: 著者更新
      operationId: updateAuthor
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAuthorResponse'
      description: 著者更新
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAuthorRequest'
      tags:
        - author
  /books:
    post:
      summary: 書籍登録
      operationId: createBook
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateBookResponse'
              examples:
                登録成功時:
                  value:
                    id: 1
      description: 書籍登録
      tags:
        - book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBookRequest'
    patch:
      summary: 書籍更新
      operationId: updateBook
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateBookResponse'
              examples: {}
      description: 書籍更新
      tags:
        - book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBookRequest'
            examples: {}
    get:
      summary: 書籍の検索
      operationId: searchBook
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
      tags:
        - book
      description: 書籍の検索
      parameters:
        - schema:
            type: string
            example: こころ
          in: query
          name: bookTitle
          description: 書籍タイトル ※部分一致検索
        - schema:
            type: string
            example: 夏目　漱石
          in: query
          name: authorName
          description: 著者名 ※部分一致検索
        - schema:
            type: string
            example: 978-4101010137
          in: query
          name: isbn
          description: ISBN ※完全一致検索
  '/authors/{id}':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
        description: ID
    get:
      summary: 著者に紐づく本を取得できる機能
      tags:
        - author
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '404':
          description: Not Found
      operationId: getAuthorById
      description: 著者に紐づく本を取得できる機能
components:
  schemas:
    CreateAuthorRequest:
      type: object
      description: 著者作成リクエスト
      properties:
        name:
          type: string
          description: 著者名
          example: 夏目　漱石
          minLength: 1
          maxLength: 100
        birthday:
          type: string
          description: 誕生日
          example: '2020-01-01'
          format: date
      required:
        - name
      title: 著者作成リクエスト
      x-stoplight:
        id: f56e044dc35c9
    UpdateAuthorRequest:
      title: 著者更新リクエスト
      x-stoplight:
        id: a5e173dacc7a0
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: ID
        name:
          type: string
          minLength: 1
          maxLength: 100
          example: 夏目　漱石
          description: 著者名
        birthday:
          type: string
          format: date
          example: '2000-01-01'
          description: 誕生日
      required:
        - id
        - name
      description: 著者更新リクエスト
    CreateBookRequest:
      title: 書籍作成リクエスト
      x-stoplight:
        id: 28493631cd667
      type: object
      description: 書籍作成リクエスト
      properties:
        isbn:
          type: string
          description: ISBN
          maxLength: 17
          example: 978-4101010137
        authorId:
          type: integer
          example: 1
          description: 著者ID
        title:
          type: string
          description: タイトル
          minLength: 1
          maxLength: 100
          example: こころ
      required:
        - authorId
        - title
    UpdateBookRequest:
      title: 書籍更新リクエスト
      x-stoplight:
        id: 83c501596f526
      type: object
      description: 書籍更新リクエスト
      properties:
        id:
          type: integer
          description: ID
        isbn:
          type: string
          description: ISBN
          maxLength: 17
          example: 978-4101010137
        authorId:
          type: integer
          example: 1
          description: 著者ID
        title:
          type: string
          description: タイトル
          minLength: 1
          maxLength: 100
          example: こころ
      required:
        - id
        - authorId
        - title
    Author:
      title: 著者
      x-stoplight:
        id: g8akxct1grn56
      type: object
      description: 著者
      properties:
        id:
          type: integer
          description: ID
          example: 1
        name:
          type: string
          description: 著者名
          example: 夏目　漱石
        birthday:
          type: string
          description: 誕生日
          example: '2000-01-01'
          format: date
        books:
          type: array
          description: 著者の書籍
          items:
            $ref: '#/components/schemas/AuthorBook'
      required:
        - id
        - name
        - books
    AuthorBook:
      title: 著者の書籍
      x-stoplight:
        id: 2g0opobb408k1
      type: object
      description: 著者の書籍
      properties:
        id:
          type: integer
          description: ID
          default: 1
        isbn:
          type: string
          example: 978-4101010137
          description: ISBN
        title:
          type: string
          example: こころ
          description: タイトル
      required:
        - id
        - title
    Book:
      title: 書籍
      x-stoplight:
        id: 1k3jugezay1ke
      type: object
      description: 書籍
      properties:
        id:
          type: integer
          description: ID
          example: 1
        isbn:
          type: string
          description: ISBN
          example: 978-4101010137
        title:
          type: string
          description: タイトル
          example: こころ
        author:
          $ref: '#/components/schemas/BookAuthor'
      required:
        - id
        - title
        - author
    BookAuthor:
      title: 書籍の著者
      x-stoplight:
        id: taweepph9g19d
      type: object
      description: 書籍の著者
      properties:
        authorId:
          type: integer
          example: 1
          description: ID
        name:
          type: string
          description: 著者名
          example: 夏目　漱石
        birthday:
          type: string
          description: 誕生日
          example: '2000-01-01'
          format: date
      required:
        - authorId
        - name
    CreateBookResponse:
      title: CreateBookResponse
      x-stoplight:
        id: qi3wrilss487o
      type: object
      description: 書籍登録に成功した場合のレスポンス
      properties:
        id:
          type: integer
          example: 1
          description: ID
      required:
        - id
    UpdateBookResponse:
      title: UpdateBookResponse
      x-stoplight:
        id: 2md7c6pz5k1et
      type: object
      description: 書籍更新に成功した場合のレスポンス
      properties:
        id:
          type: integer
          example: 1
          description: ID
      required:
        - id
    CreateAuthorResponse:
      title: CreateAuthorResponse
      x-stoplight:
        id: 8cc07plgas186
      type: object
      description: 著者登録に成功した場合のレスポンス
      properties:
        id:
          type: integer
          description: ID
          example: 1
      required:
        - id
    UpdateAuthorResponse:
      title: UpdateAuthorResponse
      x-stoplight:
        id: dq90t3syc4b9x
      type: object
      description: 著者登録に成功した場合のレスポンス
      properties:
        id:
          type: integer
          example: 1
          description: ID
      required:
        - id
  responses: {}
tags:
  - name: author
    description: 著者
  - name: book
    description: 書籍
